import dependencies.PluginsVersions

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = PluginsVersions.JACOCO
}

def sources = files("$projectDir/src/main/java")

task jacocoTestReport(type: JacocoReport) {
    group 'Reporting'
    description 'Run tests and generate coverage report for instrumented and jvm testes'
    dependsOn 'testDebugUnitTest'
    dependsOn 'createDebugCoverageReport'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*_ViewBinding*.*',
            '**/*BR*.*',
            '**/databinding/**',
            '**/di/**',
            '**/ui/**'
    ]

    def javaTree = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories = files([javaTree], [kotlinTree])
    def coverageSourceDirs = [
            "src/main/java"
    ]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)

    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/*.exec",
            "outputs/code_coverage/**/connected/*.ec",
            "tmp/tests/*.exec",
            "tmp/tests/*.ec",
    ])

    doLast {
        println "Jacoco report has been generated to file://${reports.html.destination}/index.html"
    }
}

coveralls {
    sourceDirs = sources.flatten()
    jacocoReportPath = "$buildDir/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}
